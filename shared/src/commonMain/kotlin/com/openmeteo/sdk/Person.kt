// automatically generated by the FlatBuffers compiler, do not modify

package com.openmeteo.sdk

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class Person : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : Person = reset(i, buffer)

    val name : String? get() = lookupField(4, null ) { string(it + bufferPos) }
    fun nameAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 4, 1)

    val age : Int get() = lookupField(6, 0 ) { bb.getInt(it + bufferPos) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : Person = asRoot(buffer, Person())
        fun asRoot(buffer: ReadWriteBuffer, obj: Person) : Person = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createPerson(builder: FlatBufferBuilder, nameOffset: Offset<String>, age: Int) : Offset<Person> {
            builder.startTable(2)
            addAge(builder, age)
            addName(builder, nameOffset)
            return endPerson(builder)
        }
        fun startPerson(builder: FlatBufferBuilder) = builder.startTable(2)

        fun addName(builder: FlatBufferBuilder, name: Offset<String>) = builder.add(0, name, 0)

        fun addAge(builder: FlatBufferBuilder, age: Int) = builder.add(1, age, 0)

        fun endPerson(builder: FlatBufferBuilder) : Offset<Person> {
            val o: Offset<Person> = builder.endTable()
            return o
        }

        fun finishPersonBuffer(builder: FlatBufferBuilder, offset: Offset<Person>) = builder.finish(offset)

        fun finishSizePrefixedPersonBuffer(builder: FlatBufferBuilder, offset: Offset<Person>) = builder.finishSizePrefixed(offset)
    }
}

typealias PersonOffsetArray = OffsetArray<Person>

inline fun PersonOffsetArray(size: Int, crossinline call: (Int) -> Offset<Person>): PersonOffsetArray =
    PersonOffsetArray(IntArray(size) { call(it).value })
