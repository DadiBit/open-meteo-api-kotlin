// automatically generated by the FlatBuffers compiler, do not modify

package com.openmeteo.sdk

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class VariableWithValues : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : VariableWithValues = reset(i, buffer)

    val variable : com.openmeteo.sdk.Variable get() = lookupField(4, com.openmeteo.sdk.Variable(0u) ) { com.openmeteo.sdk.Variable(bb.getUByte(it + bufferPos)) }

    val unit : com.openmeteo.sdk.Unit get() = lookupField(6, com.openmeteo.sdk.Unit(0u) ) { com.openmeteo.sdk.Unit(bb.getUByte(it + bufferPos)) }

    val value : Float get() = lookupField(8, 0.0f ) { bb.getFloat(it + bufferPos) }

    fun values(j: Int) : Float = lookupField(10, 0f ) { bb.getFloat(vector(it) + j * 4) }
    val valuesLength : Int get() = lookupField(10, 0 ) { vectorLength(it) }
    fun valuesAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 10, 4)

    fun valuesInt64(j: Int) : Long = lookupField(12, 0L ) { bb.getLong(vector(it) + j * 8) }
    val valuesInt64Length : Int get() = lookupField(12, 0 ) { vectorLength(it) }
    fun valuesInt64AsBuffer() : ReadBuffer = vectorAsBuffer(bb, 12, 8)

    val altitude : Short get() = lookupField(14, 0 ) { bb.getShort(it + bufferPos) }

    val aggregation : com.openmeteo.sdk.Aggregation get() = lookupField(16, com.openmeteo.sdk.Aggregation(0u) ) { com.openmeteo.sdk.Aggregation(bb.getUByte(it + bufferPos)) }

    val pressureLevel : Short get() = lookupField(18, 0 ) { bb.getShort(it + bufferPos) }

    val depth : Short get() = lookupField(20, 0 ) { bb.getShort(it + bufferPos) }

    val depthTo : Short get() = lookupField(22, 0 ) { bb.getShort(it + bufferPos) }

    val ensembleMember : Short get() = lookupField(24, 0 ) { bb.getShort(it + bufferPos) }

    val previousDay : Short get() = lookupField(26, 0 ) { bb.getShort(it + bufferPos) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : VariableWithValues = asRoot(buffer, VariableWithValues())
        fun asRoot(buffer: ReadWriteBuffer, obj: VariableWithValues) : VariableWithValues = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createVariableWithValues(builder: FlatBufferBuilder, variable: com.openmeteo.sdk.Variable, unit: com.openmeteo.sdk.Unit, value: Float, valuesOffset: VectorOffset<Float>, valuesInt64Offset: VectorOffset<Long>, altitude: Short, aggregation: com.openmeteo.sdk.Aggregation, pressureLevel: Short, depth: Short, depthTo: Short, ensembleMember: Short, previousDay: Short) : Offset<VariableWithValues> {
            builder.startTable(12)
            addValuesInt64(builder, valuesInt64Offset)
            addValues(builder, valuesOffset)
            addValue(builder, value)
            addPreviousDay(builder, previousDay)
            addEnsembleMember(builder, ensembleMember)
            addDepthTo(builder, depthTo)
            addDepth(builder, depth)
            addPressureLevel(builder, pressureLevel)
            addAltitude(builder, altitude)
            addAggregation(builder, aggregation)
            addUnit(builder, unit)
            addVariable(builder, variable)
            return endVariableWithValues(builder)
        }
        fun startVariableWithValues(builder: FlatBufferBuilder) = builder.startTable(12)

        fun addVariable(builder: FlatBufferBuilder, variable: com.openmeteo.sdk.Variable) = builder.add(0, variable.value, 0u)

        fun addUnit(builder: FlatBufferBuilder, unit: com.openmeteo.sdk.Unit) = builder.add(1, unit.value, 0u)

        fun addValue(builder: FlatBufferBuilder, value: Float) = builder.add(2, value, 0.0f)

        fun addValues(builder: FlatBufferBuilder, values: VectorOffset<Float>) = builder.add(3, values, 0)

        fun createValuesVector(builder: FlatBufferBuilder, vector:FloatArray) : VectorOffset<Float> {
            builder.startVector(4, vector.size, 4)
            for (i in vector.size - 1 downTo 0) {
                builder.add(vector[i])
            }
            return builder.endVector()
        }

        fun startValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)

        fun addValuesInt64(builder: FlatBufferBuilder, valuesInt64: VectorOffset<Long>) = builder.add(4, valuesInt64, 0)

        fun createValuesInt64Vector(builder: FlatBufferBuilder, vector:LongArray) : VectorOffset<Long> {
            builder.startVector(8, vector.size, 8)
            for (i in vector.size - 1 downTo 0) {
                builder.add(vector[i])
            }
            return builder.endVector()
        }

        fun startValuesInt64Vector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)

        fun addAltitude(builder: FlatBufferBuilder, altitude: Short) = builder.add(5, altitude, 0)

        fun addAggregation(builder: FlatBufferBuilder, aggregation: com.openmeteo.sdk.Aggregation) = builder.add(6, aggregation.value, 0u)

        fun addPressureLevel(builder: FlatBufferBuilder, pressureLevel: Short) = builder.add(7, pressureLevel, 0)

        fun addDepth(builder: FlatBufferBuilder, depth: Short) = builder.add(8, depth, 0)

        fun addDepthTo(builder: FlatBufferBuilder, depthTo: Short) = builder.add(9, depthTo, 0)

        fun addEnsembleMember(builder: FlatBufferBuilder, ensembleMember: Short) = builder.add(10, ensembleMember, 0)

        fun addPreviousDay(builder: FlatBufferBuilder, previousDay: Short) = builder.add(11, previousDay, 0)

        fun endVariableWithValues(builder: FlatBufferBuilder) : Offset<VariableWithValues> {
            val o: Offset<VariableWithValues> = builder.endTable()
            return o
        }
    }
}

typealias VariableWithValuesOffsetArray = OffsetArray<VariableWithValues>

inline fun VariableWithValuesOffsetArray(size: Int, crossinline call: (Int) -> Offset<VariableWithValues>): VariableWithValuesOffsetArray =
    VariableWithValuesOffsetArray(IntArray(size) { call(it).value })
