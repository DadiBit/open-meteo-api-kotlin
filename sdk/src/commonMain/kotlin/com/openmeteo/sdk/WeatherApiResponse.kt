// automatically generated by the FlatBuffers compiler, do not modify

package com.openmeteo.sdk

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class WeatherApiResponse : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : WeatherApiResponse = reset(i, buffer)

    val latitude : Float get() = lookupField(4, 0.0f ) { bb.getFloat(it + bufferPos) }

    val longitude : Float get() = lookupField(6, 0.0f ) { bb.getFloat(it + bufferPos) }

    val elevation : Float get() = lookupField(8, 0.0f ) { bb.getFloat(it + bufferPos) }

    val generationTimeMilliseconds : Float get() = lookupField(10, 0.0f ) { bb.getFloat(it + bufferPos) }

    val locationId : Long get() = lookupField(12, 0L ) { bb.getLong(it + bufferPos) }

    val model : com.openmeteo.sdk.Model get() = lookupField(14, com.openmeteo.sdk.Model(0u) ) { com.openmeteo.sdk.Model(bb.getUByte(it + bufferPos)) }

    val utcOffsetSeconds : Int get() = lookupField(16, 0 ) { bb.getInt(it + bufferPos) }

    val timezone : String? get() = lookupField(18, null ) { string(it + bufferPos) }
    fun timezoneAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 18, 1)

    val timezoneAbbreviation : String? get() = lookupField(20, null ) { string(it + bufferPos) }
    fun timezoneAbbreviationAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 20, 1)

    val current : com.openmeteo.sdk.VariablesWithTime? get() = current(com.openmeteo.sdk.VariablesWithTime())
    fun current(obj: com.openmeteo.sdk.VariablesWithTime) : com.openmeteo.sdk.VariablesWithTime? = lookupField(22, null ) { obj.init(indirect(it + bufferPos), bb) }

    val daily : com.openmeteo.sdk.VariablesWithTime? get() = daily(com.openmeteo.sdk.VariablesWithTime())
    fun daily(obj: com.openmeteo.sdk.VariablesWithTime) : com.openmeteo.sdk.VariablesWithTime? = lookupField(24, null ) { obj.init(indirect(it + bufferPos), bb) }

    val hourly : com.openmeteo.sdk.VariablesWithTime? get() = hourly(com.openmeteo.sdk.VariablesWithTime())
    fun hourly(obj: com.openmeteo.sdk.VariablesWithTime) : com.openmeteo.sdk.VariablesWithTime? = lookupField(26, null ) { obj.init(indirect(it + bufferPos), bb) }

    val minutely15 : com.openmeteo.sdk.VariablesWithTime? get() = minutely15(com.openmeteo.sdk.VariablesWithTime())
    fun minutely15(obj: com.openmeteo.sdk.VariablesWithTime) : com.openmeteo.sdk.VariablesWithTime? = lookupField(28, null ) { obj.init(indirect(it + bufferPos), bb) }

    val sixHourly : com.openmeteo.sdk.VariablesWithTime? get() = sixHourly(com.openmeteo.sdk.VariablesWithTime())
    fun sixHourly(obj: com.openmeteo.sdk.VariablesWithTime) : com.openmeteo.sdk.VariablesWithTime? = lookupField(30, null ) { obj.init(indirect(it + bufferPos), bb) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : WeatherApiResponse = asRoot(buffer, WeatherApiResponse())
        fun asRoot(buffer: ReadWriteBuffer, obj: WeatherApiResponse) : WeatherApiResponse = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createWeatherApiResponse(builder: FlatBufferBuilder, latitude: Float, longitude: Float, elevation: Float, generationTimeMilliseconds: Float, locationId: Long, model: com.openmeteo.sdk.Model, utcOffsetSeconds: Int, timezoneOffset: Offset<String>, timezoneAbbreviationOffset: Offset<String>, currentOffset: Offset<com.openmeteo.sdk.VariablesWithTime>, dailyOffset: Offset<com.openmeteo.sdk.VariablesWithTime>, hourlyOffset: Offset<com.openmeteo.sdk.VariablesWithTime>, minutely15Offset: Offset<com.openmeteo.sdk.VariablesWithTime>, sixHourlyOffset: Offset<com.openmeteo.sdk.VariablesWithTime>) : Offset<WeatherApiResponse> {
            builder.startTable(14)
            addLocationId(builder, locationId)
            addSixHourly(builder, sixHourlyOffset)
            addMinutely15(builder, minutely15Offset)
            addHourly(builder, hourlyOffset)
            addDaily(builder, dailyOffset)
            addCurrent(builder, currentOffset)
            addTimezoneAbbreviation(builder, timezoneAbbreviationOffset)
            addTimezone(builder, timezoneOffset)
            addUtcOffsetSeconds(builder, utcOffsetSeconds)
            addGenerationTimeMilliseconds(builder, generationTimeMilliseconds)
            addElevation(builder, elevation)
            addLongitude(builder, longitude)
            addLatitude(builder, latitude)
            addModel(builder, model)
            return endWeatherApiResponse(builder)
        }
        fun startWeatherApiResponse(builder: FlatBufferBuilder) = builder.startTable(14)

        fun addLatitude(builder: FlatBufferBuilder, latitude: Float) = builder.add(0, latitude, 0.0f)

        fun addLongitude(builder: FlatBufferBuilder, longitude: Float) = builder.add(1, longitude, 0.0f)

        fun addElevation(builder: FlatBufferBuilder, elevation: Float) = builder.add(2, elevation, 0.0f)

        fun addGenerationTimeMilliseconds(builder: FlatBufferBuilder, generationTimeMilliseconds: Float) = builder.add(3, generationTimeMilliseconds, 0.0f)

        fun addLocationId(builder: FlatBufferBuilder, locationId: Long) = builder.add(4, locationId, 0L)

        fun addModel(builder: FlatBufferBuilder, model: com.openmeteo.sdk.Model) = builder.add(5, model.value, 0u)

        fun addUtcOffsetSeconds(builder: FlatBufferBuilder, utcOffsetSeconds: Int) = builder.add(6, utcOffsetSeconds, 0)

        fun addTimezone(builder: FlatBufferBuilder, timezone: Offset<String>) = builder.add(7, timezone, 0)

        fun addTimezoneAbbreviation(builder: FlatBufferBuilder, timezoneAbbreviation: Offset<String>) = builder.add(8, timezoneAbbreviation, 0)

        fun addCurrent(builder: FlatBufferBuilder, current: Offset<com.openmeteo.sdk.VariablesWithTime>) = builder.add(9, current, 0)

        fun addDaily(builder: FlatBufferBuilder, daily: Offset<com.openmeteo.sdk.VariablesWithTime>) = builder.add(10, daily, 0)

        fun addHourly(builder: FlatBufferBuilder, hourly: Offset<com.openmeteo.sdk.VariablesWithTime>) = builder.add(11, hourly, 0)

        fun addMinutely15(builder: FlatBufferBuilder, minutely15: Offset<com.openmeteo.sdk.VariablesWithTime>) = builder.add(12, minutely15, 0)

        fun addSixHourly(builder: FlatBufferBuilder, sixHourly: Offset<com.openmeteo.sdk.VariablesWithTime>) = builder.add(13, sixHourly, 0)

        fun endWeatherApiResponse(builder: FlatBufferBuilder) : Offset<WeatherApiResponse> {
            val o: Offset<WeatherApiResponse> = builder.endTable()
            return o
        }

        fun finishWeatherApiResponseBuffer(builder: FlatBufferBuilder, offset: Offset<WeatherApiResponse>) = builder.finish(offset)

        fun finishSizePrefixedWeatherApiResponseBuffer(builder: FlatBufferBuilder, offset: Offset<WeatherApiResponse>) = builder.finishSizePrefixed(offset)
    }
}

typealias WeatherApiResponseOffsetArray = OffsetArray<WeatherApiResponse>

inline fun WeatherApiResponseOffsetArray(size: Int, crossinline call: (Int) -> Offset<WeatherApiResponse>): WeatherApiResponseOffsetArray =
    WeatherApiResponseOffsetArray(IntArray(size) { call(it).value })
